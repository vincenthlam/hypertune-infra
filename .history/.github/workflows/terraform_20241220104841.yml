name: 'MLOps Platform CI/CD'

on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'
      - 'config/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  TF_LOG: INFO
  # OCI configurations
  TF_VAR_tenancy_ocid: ${{ secrets.OCI_TENANCY_OCID }}
  TF_VAR_user_ocid: ${{ secrets.OCI_USER_OCID }}
  TF_VAR_fingerprint: ${{ secrets.OCI_FINGERPRINT }}
  TF_VAR_region: ${{ secrets.OCI_REGION }}
  # Service configurations
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  QDRANT_URL: ${{ secrets.QDRANT_URL }}
  CACHE_URL: ${{ secrets.CACHE_URL }}

jobs:
  validate:
    name: 'Validate'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup OCI CLI
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
        terraform_wrapper: false

    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      working-directory: ./terraform

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.OCI_STATE_BUCKET }}" \
          -backend-config="key=${GITHUB_REF##*/}.tfstate" \
          -backend-config="region=${{ secrets.OCI_REGION }}"
      working-directory: ./terraform/environments/dev

    - name: Free Tier Compliance Check
      id: compliance
      run: |
        python3 scripts/check_free_tier.py ./terraform/environments/dev/main.tf

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      working-directory: ./terraform/environments/dev

  plan:
    name: 'Plan'
    needs: validate
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Prerequisites
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.OCI_STATE_BUCKET }}" \
          -backend-config="key=${GITHUB_REF##*/}.tfstate" \
          -backend-config="region=${{ secrets.OCI_REGION }}"
      working-directory: ./terraform/environments/dev

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      working-directory: ./terraform/environments/dev
      continue-on-error: true

    - name: Update PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  deploy:
    name: 'Deploy'
    needs: [validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Prerequisites
      run: |
        mkdir -p ~/.oci
        echo "${{ secrets.OCI_PRIVATE_KEY }}" > ~/.oci/oci_api_key.pem
        chmod 600 ~/.oci/oci_api_key.pem

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.0"
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.OCI_STATE_BUCKET }}" \
          -backend-config="key=${GITHUB_REF##*/}.tfstate" \
          -backend-config="region=${{ secrets.OCI_REGION }}"
      working-directory: ./terraform/environments/dev

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform/environments/dev

    - name: Verify Services
      run: |
        python3 scripts/verify_services.py \
          --mlflow-url=${{ env.MLFLOW_TRACKING_URI }} \
          --qdrant-url=${{ env.QDRANT_URL }} \
          --cache-url=${{ env.CACHE_URL }}

  notify:
    name: 'Notification'
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Status
      uses: ravsamhq/notify-slack-action@v2
      if: always()
      with:
        status: ${{ job.status }}
        notification_title: "MLOps Platform Deployment"
        message_format: "{emoji} *{workflow}* {status_message}"
        footer: "Linked to <{repo_url}|{repo}>"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}